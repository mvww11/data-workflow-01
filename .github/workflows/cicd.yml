# https://developer.hashicorp.com/terraform/tutorials/automation/github-actions

# Must set github env vars:
#   TF_API_TOKEN: terraform cloud API token
#   TF_VAR_PUBLIC_KEY: pub ssh key of local machine to allow ssh connection to ec2

name: "DareData CI/CD"

on:
  push:
    branches:
      - main
      - implementation
  pull_request:

env:
  TF_VAR_public_key: ${{ secrets.TF_VAR_PUBLIC_KEY }}

jobs:
  lint:
    name: "Enforce Linting"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: psf/black@stable
        with:
          version: "22.10.0"

  testing:
    name: "Pytest"
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: testing
      run: python -m pip install pytest && pytest modules/deployment/tests

  terraform:
    name: "Terraform"
    needs: testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform -chdir=infra fmt -check

      - name: Terraform Init
        id: init
        run: terraform -chdir=infra init

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=infra validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform -chdir=infra plan -no-color -input=false
        continue-on-error: true

      - name: Post results in PR page
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Destroy Previous Infra
        id: destroy
        if: |
          github.event_name == 'push' &&
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/implementation')
        run: terraform -chdir=infra destroy -auto-approve
        continue-on-error: true

      - name: Terraform Apply
        if: |
          github.event_name == 'push' &&
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/implementation')
        run: terraform -chdir=infra apply -auto-approve -input=false
